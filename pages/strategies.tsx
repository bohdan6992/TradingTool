// pages/index.tsx
import { useEffect, useState } from "react";
import Head from "next/head";
import StrategyCard from "@/components/StrategyCard";

type Strategy = {
  id: string;
  name: string;
  description?: string;
  href?: string; // –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ: —Å–≤—ñ–π —à–ª—è—Ö
};

export default function Home() {
  const [strategies, setStrategies] = useState<Strategy[]>([]);
  const [loading, setLoading] = useState(true);
  const [err, setErr] = useState<string | null>(null);

  useEffect(() => {
    (async () => {
      try {
        const r = await fetch("/api/strategies");
        if (!r.ok) throw new Error(`HTTP ${r.status}`);
        const data = await r.json();
        setStrategies(Array.isArray(data) ? data : data?.items || []);
      } catch (e: any) {
        setErr(e?.message || "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è");
      } finally {
        setLoading(false);
      }
    })();
  }, []);

  const skeletonCount = 6;

  // –î–µ–ª–µ–≥–æ–≤–∞–Ω–∏–π –ø–µ—Ä–µ—Ö—ñ–¥: —à—É–∫–∞—î–º–æ –ø–µ—Ä—à–∏–π <a> –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –ø–ª–∏—Ç–∫–∏ —ñ –∫–ª—ñ–∫–∞—î–º–æ –π–æ–≥–æ.
  function openCard(target: HTMLElement) {
    // 1) –°–ø—Ä–æ–±–∞ –∑–Ω–∞–π—Ç–∏ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –ª—ñ–Ω–∫ —É StrategyCard
    const innerLink =
      target.querySelector("a[href]") as HTMLAnchorElement | null;

    if (innerLink && innerLink.href) {
      if (innerLink.target === "_blank") {
        window.open(innerLink.href, "_blank", "noopener,noreferrer");
      } else {
        // –í—ñ–¥–¥–∞—î–º–æ –ø–µ—Ä–µ–≤–∞–≥—É —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó, —è–∫—É –≤–∂–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ
        innerLink.click();
      }
      return;
    }

    // 2) –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç: —è–∫—â–æ —É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —î data-href (—ñ–∑ API)
    const fallback = (target.getAttribute("data-href") || "").trim();
    if (fallback) {
      window.location.assign(fallback);
    }
  }

  return (
    <>
      <Head>
        <title>–°—Ç—Ä–∞—Ç–µ–≥—ñ—ó ‚Äî TradingTool</title>
      </Head>

      <main className="wrap">
        <section className="section">
          <header className="section-head">
            <div className="title-wrap">
              <h1 className="title">–°—Ç—Ä–∞—Ç–µ–≥—ñ—ó</h1>
              {!loading && !err && (
                <span className="badge" aria-label="–∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π">
                  {strategies.length}
                </span>
              )}
            </div>
            <p className="subtitle">
              –ì–æ—Ç–æ–≤—ñ –ø—ñ–¥—Ö–æ–¥–∏ —Ç–∞ —ñ–¥–µ—ó. –û–±–µ—Ä–∏ –ø–ª–∏—Ç–∫—É, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–µ—Ç–∞–ª—ñ.
            </p>
          </header>

          {loading && (
            <div className="grid">
              {Array.from({ length: skeletonCount }).map((_, i) => (
                <div className="skeleton-card" key={i} />
              ))}
            </div>
          )}

          {!loading && err && (
            <div className="note error">–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {err}</div>
          )}

          {!loading && !err && strategies.length === 0 && (
            <div className="note">–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è.</div>
          )}

          {!loading && !err && strategies.length > 0 && (
            <div className="grid">
              {strategies.map((s) => {
                // –î–∞–º–æ –∑–∞–ø–∞—Å–Ω–∏–π —à–ª—è—Ö, —è–∫—â–æ –≤—ñ–Ω —Ç–∞–∫–∏ –ø—Ä–∏—ó–¥–µ –∑ API
                const dataHref =
                  s.href && s.href.startsWith("/")
                    ? s.href
                    : s.href || ""; // –∑–∞–ª–∏—à–∏–º–æ –ø—É—Å—Ç–∏–º —è–∫—â–æ –Ω–µ–º–∞

                return (
                  <div
                    key={s.id}
                    className="card clickable"
                    role="link"
                    tabIndex={0}
                    data-href={dataHref}
                    onClick={(e) => openCard(e.currentTarget as HTMLElement)}
                    onKeyDown={(e) => {
                      if (e.key === "Enter" || e.key === " ") {
                        e.preventDefault();
                        openCard(e.currentTarget as HTMLElement);
                      }
                    }}
                    aria-label={`–í—ñ–¥–∫—Ä–∏—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é ${s.name}`}
                  >
                    <div className="card-inner">
                      <StrategyCard s={s} />
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </section>
      </main>

      <style jsx>{`
        /* ====== –õ–µ–π–∞—É—Ç ====== */
        .wrap {
          max-width: 1200px;
          margin: 0 auto;
          padding: 18px 16px 28px;
        }

        .section {
          position: relative;
          border-radius: 22px;
          background: linear-gradient(
            180deg,
            color-mix(in oklab, var(--card-bg) 92%, transparent) 0%,
            color-mix(in oklab, var(--card-bg) 86%, transparent) 100%
          );
          border: 1px solid var(--card-border);
          box-shadow: 0 12px 38px rgba(0, 0, 0, 0.1);
          padding: 18px;
          overflow: hidden;
        }
        .section::before {
          content: "";
          position: absolute;
          inset: 0;
          pointer-events: none;
          background: radial-gradient(
            900px 400px at 6% 0%,
            color-mix(in oklab, var(--color-primary) 14%, transparent) 0%,
            transparent 60%
          );
          opacity: 0.7;
        }

        /* ====== –ó–∞–≥–æ–ª–æ–≤–æ–∫ ====== */
        .section-head {
          position: relative;
          z-index: 1;
          margin-bottom: 12px;
        }
        .title-wrap {
          display: inline-flex;
          align-items: center;
          gap: 10px;
        }
        .title {
          font-size: 1.6rem;
          line-height: 2rem;
          font-weight: 900;
          letter-spacing: 0.2px;
          margin: 0;
        }
        .badge {
          display: inline-flex;
          align-items: center;
          justify-content: center;
          height: 28px;
          min-width: 28px;
          padding: 0 10px;
          font-size: 0.85rem;
          font-weight: 800;
          color: white;
          background: color-mix(in oklab, var(--color-primary) 75%, #0000);
          border: 1px solid
            color-mix(in oklab, var(--color-primary) 94%, var(--card-border));
          border-radius: 999px;
          box-shadow: 0 6px 18px
            color-mix(in oklab, var(--color-primary) 35%, transparent);
        }
        .subtitle {
          margin: 8px 2px 0;
          opacity: 0.78;
          font-size: 0.95rem;
        }

        /* ====== –°—ñ—Ç–∫–∞ ====== */
        .grid {
          position: relative;
          z-index: 1;
          display: grid;
          gap: 16px;
          grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
        }

        /* ====== –ü–ª–∏—Ç–∫–∞ ====== */
        .card {
          border-radius: 16px;
          border: 1px solid var(--card-border);
          background: color-mix(in oklab, var(--card-bg) 94%, transparent);
          transition: border-color 0.18s ease, box-shadow 0.18s ease,
            transform 0.18s ease;
          box-shadow: 0 6px 18px rgba(0, 0, 0, 0.06);
          overflow: hidden;
        }
        .clickable {
          cursor: pointer;
          outline: none;
        }
        .clickable:focus-visible {
          box-shadow: 0 0 0 3px color-mix(
              in oklab,
              var(--color-primary) 45%,
              transparent
            );
        }
        .card:hover {
          border-color: color-mix(
            in oklab,
            var(--color-primary) 38%,
            var(--card-border)
          );
          box-shadow: 0 14px 30px rgba(0, 0, 0, 0.14);
          transform: translateY(-2px);
        }
        .card-inner {
          min-height: 124px;
          padding: 12px 14px;
          display: flex;
          flex-direction: column;
          justify-content: center;
          gap: 8px;
        }

        /* üîï –•–æ–≤–∞—î–º–æ –≤–∏–¥–∏–º–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ StrategyCard,
           –∞–ª–µ –≤–æ–Ω–æ –ª–∏—à–∞—î—Ç—å—Å—è —É DOM –¥–ª—è –¥–µ–ª–µ–≥–æ–≤–∞–Ω–æ–≥–æ –∫–ª—ñ–∫—É */
        .card :global(a) {
          display: none;
        }

        /* ====== –Ü–Ω—Ñ–æ-–±–ª–æ–∫–∏ ====== */
        .note {
          position: relative;
          z-index: 1;
          background: var(--card-bg);
          border: 1px solid var(--card-border);
          border-radius: 16px;
          padding: 14px;
          opacity: 0.92;
        }
        .error {
          color: #ff6b6b;
          border-color: color-mix(in oklab, #ff6b6b 35%, var(--card-border));
          background: linear-gradient(
            180deg,
            color-mix(in oklab, #ff6b6b 8%, var(--card-bg)) 0%,
            var(--card-bg) 100%
          );
        }

        /* ====== –°–∫–µ–ª–µ—Ç–æ–Ω ====== */
        .skeleton-card {
          height: 124px;
          border-radius: 16px;
          border: 1px solid var(--card-border);
          background: linear-gradient(
            90deg,
            color-mix(in oklab, var(--card-bg) 90%, transparent) 0%,
            color-mix(in oklab, var(--card-bg) 82%, transparent) 50%,
            color-mix(in oklab, var(--card-bg) 90%, transparent) 100%
          );
          animation: shimmer 1.4s infinite linear;
          background-size: 200% 100%;
        }
        @keyframes shimmer {
          0% {
            background-position: 200% 0;
          }
          100% {
            background-position: -200% 0;
          }
        }

        :global(html[data-theme*="dark"]) .card:hover {
          box-shadow: 0 18px 40px rgba(0, 0, 0, 0.35);
        }
      `}</style>
    </>
  );
}
